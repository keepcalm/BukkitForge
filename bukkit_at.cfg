# BukkitForge Access Transformer Configuration.
# Suffixing with -f makes something non-final.
# viy: set nobackup nowritebackup :

# CallableMinecraftVersion
public b 

# InventoryCrafting
public tr.c # eventHandler - Container for Inventory

# TileEntityRecordPlayer
public aod.a

# CraftingManager
public yk.b # CraftingManager.recipes - so we can clear recipes.
public-f yk.a # CraftingManager.instance - to reset the CraftingManager
public yk.<init>()V # reset CraftingManager.

# NetServerHandler
public-f jh.a # The underlying network manager for this server handler.

# DedicatedServer
public hz.o # DedicatedServer.settings - to reload the settings of the server

# World
public aab.F # World.spawnPeacefulMobs - world-by-world settings
public aab.E # World.spawnHostileMobs - world-by-world settings
public-f aab.t # World.provider - change environment (bukkit does this, god knows why)

# ServerConfigurationManager
public gu.j # lets us directly load player NBTTagCompounds for reading.

# Entity
# public mp.af # let us get if a creeper is powered or not (Entity.dataWatcher) - use getDataWatcher instead
public mp.d # let us get if an entity is on fire or not

# EntityThrowable
public tb.g # lets us set and get an EntityThrowable's throwing entity

# EntityPigZombie
public sc.d # lets us get and set a PigZombie's anger.

# EntityXPOrb
public nc.e # lets us get and set an XP orb's value.

# EntityLiving
public ng.bB # lets us get and set the last damaging EntityPlayer
public ng.bk # lets us get/set the last damage amount.
public ng.bc # lets us get/set the XP worth of a LivingEntity.

# EntityPlayer
public qx.bZ # sleeping

# EntityTracker
public it.b # trackedEntities
public it.c # trackedEntityIDs

# EntityPlayerMP
public iq.f # lets us look at the chunks

# EntitySlime
public sg.a(I)V # setSlimeSize

# EntityXPOrb
public lz.e # xpValue

# EntityFireworkRocket
public sv.b # field_92010_b

# BlockDispenser
public amb.j_(Laab;III)V # dispense an item...

# BlockDropper
public amd.j_(Laab;III)V # dispense an item...

# ChunkProviderServer
public iy.b(Lzz;)V # lets us save a __SINGLE__ chunk - safeSaveChunk
public iy.b # lets us inspect chunks to unload
public iy.d # currentChunkProvider
public iy.c # default empty chunk
public iy.f # long hash map of chunks
public iy.g # loaded chunks

# PlayerManager
public ik.a(IIZ)Lil; # getOrCreateChunkWatcher


# PlayerInstance
public ix.b # playersInChunk

# InventoryLargeChest
public ls.b # Upper and lower parts of the chest
public ls.c # <-- (lower part)

# FoodStats
public ti.c # get exhaustionlevel

# PlayerCapabilities
public sn.g # set walk speed

# InventoryRepair
public sn

# ItemInWorldManager
public jd.e # initialDamage
public jd.f # partiallyDestroyedBlockX
public jd.g # partiallyDestroyedBlockY
public jd.h # partiallyDestroyedBlockZ
public jd.i # curblockDamage
public jd.o # durabilityRemainingOnBlock
